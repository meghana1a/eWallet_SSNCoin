pragma solidity 0.6.0;

contract SharedWalletAllowance {
  modifier onlyOwner {
    require(msg.sender == owner, "You are not the owner");
    _;
  }
    
  uint public allowanceAmountTotal;
  address owner;
  mapping(address => uint) public balanceReceived;
  mapping(address => uint) public accountAllowance;
  
  constructor() public {
    owner = msg.sender;
  }
  
  /// Set the allowance for an address
  function addAllowance(address _to, uint _amount) public onlyOwner {
  // Can't set the allowance higher than the total amount in the contract
    assert(_amount <= getBalance());
    assert(_amount <= allowanceAmountTotal);
    accountAllowance[_to] += _amount;
    allowanceAmountTotal -= _amount;
  }
  
  /// Withdraw all of the funds to an address
  function withdrawMoney() public onlyOwner {
    address payable to = payable(msg.sender);
    to.transfer(getBalance());
  }
  
  function withdrawAllowance(uint _amount) public {
    accountAllowance[msg.sender] -= _amount;
    address payable to = payable(msg.sender);
    to.transfer(_amount);
  }

  // Deposit functions
  function receiveMoney() public payable {
    assert(balanceReceived[msg.sender] + msg.value >= balanceReceived[msg.sender]);
    balanceReceived[msg.sender] += msg.value;
    allowanceAmountTotal += msg.value;
  }

  receive() external payable {
    receiveMoney();
  }

  function getBalance() public view returns(uint) {
    return address(this).balance;
  }
}
